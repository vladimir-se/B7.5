#!/usr/bin/env python3
#coding: utf-8


import random
import sys
from os import system, name
from time import sleep


from termcolor import colored


class Battlefield():
    '''
    –ö–ª–∞—Å—Å –ø–æ–ª—è –±–æ—è.
    '''


    def __init__(self, battle_ships):
        # –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ.
        empty_field = colored('‚óã', 'blue')
        self.fieldMatrix = {
            0:{0:' ', 1:'1', 2:'2', 3:'3', 4:'4', 5:'5', 6:'6'},
            1:{0:'1', 1:empty_field, 2:empty_field, 3:empty_field, 4:empty_field, 5:empty_field, 6:empty_field},
            2:{0:'2', 1:empty_field, 2:empty_field, 3:empty_field, 4:empty_field, 5:empty_field, 6:empty_field},
            3:{0:'3', 1:empty_field, 2:empty_field, 3:empty_field, 4:empty_field, 5:empty_field, 6:empty_field},
            4:{0:'4', 1:empty_field, 2:empty_field, 3:empty_field, 4:empty_field, 5:empty_field, 6:empty_field},
            5:{0:'5', 1:empty_field, 2:empty_field, 3:empty_field, 4:empty_field, 5:empty_field, 6:empty_field},
            6:{0:'6', 1:empty_field, 2:empty_field, 3:empty_field, 4:empty_field, 5:empty_field, 6:empty_field},
        }


        # –§–ª–æ—Ç –∏–≥—Ä–æ–∫–∞. 
        self.battle_ships = battle_ships
        

        # –†–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–ª–æ—Ç–∞ –∏–≥—Ä–æ–∫–∞ –Ω–∞ –ø–æ–ª–µ.
        self.populate_battlefield()


    def display_play_field(self, hits, score):
        '''
        –û—Ç—Ä–∏—Å–æ–≤–∫–∏ –ø–æ–ª—è –±–æ—è.
        '''
        print(f"\n\t–ü–æ—Ç–µ—Ä–∏:[{hits}]\t–û—á–∫–∏:[{score}]")
        print(f"{'_' * 40}\n")
        for ox in self.fieldMatrix:
            for oy in self.fieldMatrix[ox].values():
                print(oy, end = f"{' ' * 5}")
            print('\n')
        print(f"   –ü–∞–ª—É–±—ã: {colored('‚ñ†', 'cyan')} - —Ç—Ä–∏ {colored('‚ñ†', 'magenta')} - –¥–≤–µ {colored('‚ñ†', 'yellow')} - –æ–¥–Ω–∞")


    def populate_battlefield(self):
        '''
        –†–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ—Ä–∞–±–ª–µ–π –Ω–∞ –ø–æ–ª–µ –±–æ—è.
        '''
        # –í—ã–±–æ—Ä –∫–æ—Ä–∞–±–ª—è
        for ship in self.battle_ships:
            # –í—ã–±–æ—Ä –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∫–æ—Ä–∞–±–ª—è.
            ox, oy = self.coordinat_selector(ship_decks = len(ship.get_ship_decks))
            # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –∫–æ—Ä–∞–±–ª—è.
            ship.set_ship_position(ox, oy)
            for desk in range(len(ship.get_ship_decks)):
                self.fieldMatrix[ox][oy] = ship.get_ship_decks[desk]
                oy += 1


    def coordinat_selector(self, ship_decks):
        '''
        –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ—Ä–∞–±–ª—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–∞–ª—É–±,
        –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–µ–π —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∏ –Ω–∞–ª–∏—á–∏–µ–º –∫–æ—Ä–∞–±–ª–µ–π –ø–æ –±–ª–∏–∑–æ—Å—Ç–∏.
        '''
        while True:
            oy = random.randint(1, 6)
            ox = random.randint(1, 6)
            # –£—Å–ª–æ–≤–∏—è –¥–ª—è 3—Ö –∏ 2—Ö –ø–∞–ª—É–±–Ω—ã—Ö –∫–æ—Ä–∞–±–ª–µ–π, —á—Ç–æ–±—ã –Ω–µ –∑–∞–π—Ç–∏ –∑–∞ –∫—Ä–∞—è –ø–æ–ª—è.
            if (ship_decks == 3 and oy > 4):
                oy -= 2
            elif (ship_decks == 2 and oy > 5):
                oy -= 1
            # –ü–æ–∏—Å–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ—Ä–∞–±–ª–µ–π –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º.
            if self.position_search(ox = ox, oy = oy, ship_decks = ship_decks):
                break
            else:
                continue
        return(ox, oy)


    def position_search(self, ox, oy, ship_decks = 1):
        '''
        –ü–æ–∏—Å–∫ –∫–æ—Ä–∞–±–ª—è –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º.
        '''
        for _ in range(0, ship_decks):
            for _oy in range(oy - 1 if oy > 1 else oy, oy + 2 if oy < 6 else oy):
                for _ox in range(ox - 1 if ox > 1 else ox, ox + 2 if ox < 6 else ox):
                    # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –∫–æ—Ä–∞–±–ª—å –∏–ª–∏ –≤–∑–æ—Ä–≤–∞–Ω–Ω–∞—è –ø–∞–ª—É–±–∞.
                    if BattleShip.desk in self.fieldMatrix[_ox][_oy]:
                        return False
            # –î–≤–∏–≥–∞–µ–º—Å—è –ø–æ –æ—Å–∏. 
            oy += 1 if oy < 6 else 0
        return True


class BattleShip():
    '''
    –ö–ª–∞—Å—Å –∫–æ—Ä–∞–±–ª—è.
    '''


    desk = '‚ñ†'
    bang = colored('‚úò', 'red')
    blunder = colored('T', 'green')


    def __init__(self, ship_decks):
        self.__ship_decks = []
        self.number_of_ship_decks = self.set_ship_decks(ship_decks)
        # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–æ—Ä–∞–±–ª—è [ox, oy]
        self.__ship_position = []
        self.__hit = 0


    @property
    def set_hit(self):
        '''
        –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—å.
        '''
        self.__hit += 1
    

    @property
    def get_hit(self):
        '''
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—å.
        '''
        return self.__hit


    @property
    def get_ship_decks(self):
        '''
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞–ª—É–± –∫–æ—Ä–∞–±–ª—è.
        '''
        return self.__ship_decks


    def set_ship_decks(self, ship_decks):
        '''
        –û–±–æ–∑–Ω–∞—á–∏—Ç—å –ø–∞–ª—É–±—ã –∫–æ—Ä–∞–±–ª—è.
        '''
        ship_colors = {1:"yellow", 2:"magenta", 3:"cyan"}
        if 0 < ship_decks < 4:
            for _ in range(ship_decks):
                self.__ship_decks.append(colored(BattleShip.desk, ship_colors[ship_decks]))
            return ship_decks
        else:
            raise(IndexError)
            
    
    def set_ship_position(self, ox, oy):
        '''
        –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∫–æ—Ä–∞–±–ª—è –Ω–∞ –ø–æ–ª–µ.
        '''
        self.__ship_position = [ox, oy, [ox], [i if i > 1 else 1 for i in range(oy, oy + len(self.__ship_decks))]]


    @property
    def get_ship_position(self):
        '''
        –°–µ—Ç—Ç–µ—Ä –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∫–æ—Ä–∞–±–ª—è.
        '''
        return self.__ship_position


    def blow_up_the__deck(self, desk_number):
        '''
        –ü–æ–º–µ—Ç–∏—Ç—å –ø–∞–ª—É–±—É –∫–∞–∫ –≤–∑–æ—Ä–≤–∞–Ω–Ω—É—é.
        '''
        self.__ship_decks[desk_number] = BattleShip.bang 
        return(self.__ship_decks)


class DoubleShotException(Exception):
    '''
    –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –≤—ã—Å—Ç—Ä–µ–ª–µ –ø–æ –æ–¥–Ω–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º.
    '''
    pass


class Player():
    '''
    –ö–ª–∞—Å—Å –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–π –¥–µ–π—Å—Ç–≤–∏—è –∏–≥—Ä–æ–∫–æ–≤.
    '''
    def __init__(self, name, fleet, battlefield):
        self.__player_name = name
        self.__score = 0
        self.__hint = 0
        self._shot_history = []
        self.fleet = fleet
        self.battlefield = battlefield


    @property
    def player_hint(self):
        '''
        –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Ç–µ—Ä–∏ –∏–≥—Ä–æ–∫–∞.
        '''
        return self.__hint


    @player_hint.setter
    def player_hint(self, hint):
        '''
        –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ—Ç–µ—Ä–∏ –∏–≥—Ä–æ–∫–∞.
        '''
        self.__hint = hint


    @property
    def player_score(self):
        '''
        –ü–æ–ª—É—á–∏—Ç—å –æ—á–∫–∏ –∏–≥—Ä–æ–∫–∞.
        '''
        return self.__score


    @player_score.setter
    def player_score(self, score):
        '''
        –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—á–∫–∏ –∏–≥—Ä–æ–∫–∞.
        '''
        self.__score = score


    @property
    def player_name(self):
        '''
        –£–∑–Ω–∞—Ç—å –∏–º—è –∏–≥—Ä–æ–∫–∞.
        '''
        return self.__player_name


    @player_name.setter
    def player_name(self, name):
        '''
        –ó–∞–¥–∞—Ç—å –∏–º—è –∏–≥—Ä–æ–∫–∞.
        '''
        self.__player_name = name


    def move(self):
        '''
        –í—ã—Å—Ç—Ä–µ–ª –∏–≥—Ä–æ–∫–∞.
        '''
        while True:
            __move = input(colored(' ‚Üí  ', 'green'))
            # –í—ã—Ö–æ–¥ –∏–∑ –∏–≥—Ä—ã.
            if __move == 'q':
                print("–î–æ –≤—Å—Ç—Ä–µ—á–∏! ‚úã\n")
                sys.exit()
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞.
            elif __move.isdigit() and (len(__move) == 2 and 0 < (int(__move[0]) and int(__move[1])) < 7):                    
                try:
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Å—Ç—Ä–µ–ª–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä.
                    if [__move[0], __move[1]] in self._shot_history:
                        raise DoubleShotException()
                    self._shot_history.append([__move[0], __move[1]])
                    break
                except DoubleShotException:
                    print(f"üíÄ {colored('–ü–æ–≤—Ç–æ—Ä–Ω–∞—è —Å—Ç—Ä–µ–ª—å–±–∞ –ø–æ –æ–¥–Ω–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω–∞!', 'red')} üíÄ")
                    continue
            else:
                print("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!")
                continue
            return __move


class AIPlayer(Player):
    '''
    –ö–ª–∞—Å—Å –æ–ø–∏—Å—ã–≤–∞—é—â–∏–π –¥–µ–π—Å—Ç–≤–∏—è –ò–ò –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã.
    '''
    def __init__(self, name, fleet, battlefield):
        super(AIPlayer, self).__init__(name, fleet, battlefield)


    def get_shot_coordinates(self):
        '''
        –†–∞–Ω–¥–æ–º–Ω—ã–π –≤—ã–±–æ—Ä —Ü–µ–ª–∏ –¥–ª—è —Å—Ç—Ä–µ–ª—å–±—ã.
        –í –æ–¥–Ω–æ –∏ —Ç–æ–∂–µ –º–µ—Å—Ç–æ —Å—Ç—Ä–µ–ª—è—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–µ–ª—å–∑—è. 
        '''
        while True:
            ox = random.randint(1, 6)
            oy = random.randint(1, 6)
            if [ox, oy] in self._shot_history:
                continue
            break
        self._shot_history.append([ox, oy])
        return(f"{ox}{oy}")


    def move(self):
        '''
        –†–∞–Ω–¥–æ–º–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –∏ –≤—ã—Å—Ç—Ä–µ–ª.
        '''
        sleep(random.randint(1, 5))
        return self.get_shot_coordinates()


class TheGame():
    '''
    –ö–ª–∞—Å—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞.
    '''


    def __init__(self):
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–≥—Ä—ã –∏–≥—Ä–æ–∫–∞.
        self.human_player_fleet =  self.make_fleet(three_deck = 1, double_deck = 2, single_deck = 4)
        self.human_player_field = Battlefield(self.human_player_fleet)
        self.human_player = Player("–í–∞—Å—è", self.human_player_fleet, self.human_player_field)


        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–≥—Ä—ã –∫–æ–º–ø—å—é—Ç–µ—Ä–∞.
        self.ai_player_fleet =  self.make_fleet(three_deck = 1, double_deck = 2, single_deck = 4)
        self.ai_player_field = Battlefield(self.ai_player_fleet)
        self.ai_player = AIPlayer("RoboCop", self.ai_player_fleet, self.ai_player_field)


        # –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤, –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞.
        self.players = [self.human_player, self.ai_player]


        # –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–≥—Ä—ã.
        self.game_processing()


    def make_fleet(self, *args, **kwargs):
        '''
        –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–ª–æ—Ç–∞.
        '''
        number_of_ship_decks = {'three_deck': 3, 'double_deck': 2, 'single_deck': 1}
        fleet = []
        for arg in kwargs.items():
            for _ in range(arg[1]):
                fleet.append(BattleShip(number_of_ship_decks[arg[0]]))
        return fleet


    def clear_screen(self):
        """
        –û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ö–æ–¥–∞
        """
        if name == 'nt':
            system('cls')
        else:
            system('clear')


    def select_player_move(self):
        """
        –í—ã–±–æ—Ä –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å —Ö–æ–¥.
        """
        while True:
            value = self.players.pop(0)
            self.players.append(value)
            yield value


    def game_processing(self):
        '''
        –•–æ–¥ –∏–≥—Ä—ã.
        '''
        for player in self.select_player_move():
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞.
            enemy = [enemy_ for enemy_ in self.players if enemy_ != player][0]
            msg = f"–•–æ–¥ –∏–≥—Ä–æ–∫–∞: {player.player_name}"
            while True:
                self.clear_screen()
                # self.ai_player.battlefield.display_play_field(self.ai_player.player_hint, self.ai_player.player_score)
                # –û—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ–ª–µ –∏–≥—Ä–æ–∫–∞.
                self.human_player.battlefield.display_play_field(self.human_player.player_hint, self.human_player.player_score)
                print(msg)
                move = player.move() 
                if move:
                    player.player_score = self.shot(enemy, ox = int(move[0]), oy = int(move[1]))
                    # continue
                self.victory(player, enemy)
                break


    def shot(self, enemy, ox, oy):
        '''
        –í—ã—Å—Ç—Ä–µ–ª.
        '''
        if not enemy.battlefield.position_search(ox, oy):
            # –ü–æ–º–µ—á–∞–µ–º –∫–ª–µ—Ç–∫—É –ø–æ –∫–æ—Ç–æ—Ä–æ–π –≤–µ–ª–∞—Å—å —Å—Ç—Ä–µ–ª—å–±–∞.
            if '‚óã' in enemy.battlefield.fieldMatrix[ox][oy]:
                print('------------------------------------')
                enemy.battlefield.fieldMatrix[ox][oy] = BattleShip.blunder
            if BattleShip.desk in enemy.battlefield.fieldMatrix[ox][oy]:
                enemy.battlefield.fieldMatrix[ox][oy] = BattleShip.bang

            for ship in enemy.fleet:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–∞–±–ª—å –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –≤–µ–ª–∞—Å—å —Å—Ç—Ä–µ–ª—å–±—ã.
                if ox in ship.get_ship_position[2] and oy in ship.get_ship_position[3]:
                    # –ó–∞—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ø–∞–¥–∞–Ω–∏–µ.
                    ship.set_hit
                    enemy.player_hint += 1
        return(sum([ship.get_hit for ship in enemy.fleet]))


    def victory(self, player, enemy):
        '''
        –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è.
        '''
        if player.player_score == sum([ship.number_of_ship_decks for ship in enemy.fleet]):
            print(f"üéÜ –£—Ä–∞! –ü–±–µ–¥–∏–ª {player.player_name}! üéÜ")
            sys.exit()



if __name__ == "__main__":
    game = TheGame()